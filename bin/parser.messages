prog: LET IDENT COLON HOLE EQUAL HOLE RPAR
##
## Ends in an error in state: 39.
##
## nonempty_list(defn) -> defn . [ EOF ]
## nonempty_list(defn) -> defn . nonempty_list(defn) [ EOF ]
##
## The known suffix of the stack is as follows:
## defn
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production expr1 -> expr2
## In state 17, spurious reduction of production expr -> expr1
## In state 33, spurious reduction of production defn -> LET IDENT tele COLON expr EQUAL expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON LAMBDA IDENT DOT RPAR
##
## Ends in an error in state: 11.
##
## expr1 -> LAMBDA IDENT DOT . expr1 [ RPAR LET EQUAL EOF ]
##
## The known suffix of the stack is as follows:
## LAMBDA IDENT DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON LAMBDA IDENT TYPE
##
## Ends in an error in state: 10.
##
## expr1 -> LAMBDA IDENT . DOT expr1 [ RPAR LET EQUAL EOF ]
##
## The known suffix of the stack is as follows:
## LAMBDA IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON LAMBDA TYPE
##
## Ends in an error in state: 9.
##
## expr1 -> LAMBDA . IDENT DOT expr1 [ RPAR LET EQUAL EOF ]
##
## The known suffix of the stack is as follows:
## LAMBDA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON LPAR IDENT COLON RPAR
##
## Ends in an error in state: 23.
##
## expr1 -> LPAR IDENT COLON . expr1 RPAR ARROW expr1 [ RPAR LET EQUAL EOF ]
##
## The known suffix of the stack is as follows:
## LPAR IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON LPAR IDENT COLON TYPE LET
##
## Ends in an error in state: 24.
##
## expr1 -> LPAR IDENT COLON expr1 . RPAR ARROW expr1 [ RPAR LET EQUAL EOF ]
##
## The known suffix of the stack is as follows:
## LPAR IDENT COLON expr1
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production expr1 -> expr2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON LPAR IDENT COLON TYPE RPAR ARROW RPAR
##
## Ends in an error in state: 26.
##
## expr1 -> LPAR IDENT COLON expr1 RPAR ARROW . expr1 [ RPAR LET EQUAL EOF ]
##
## The known suffix of the stack is as follows:
## LPAR IDENT COLON expr1 RPAR ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON LPAR IDENT COLON TYPE RPAR TYPE
##
## Ends in an error in state: 25.
##
## expr1 -> LPAR IDENT COLON expr1 RPAR . ARROW expr1 [ RPAR LET EQUAL EOF ]
##
## The known suffix of the stack is as follows:
## LPAR IDENT COLON expr1 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON LPAR IDENT LET
##
## Ends in an error in state: 22.
##
## expr1 -> LPAR IDENT . COLON expr1 RPAR ARROW expr1 [ RPAR LET EQUAL EOF ]
## expr3 -> IDENT . [ TYPE RPAR LPAR IDENT HOLE ]
##
## The known suffix of the stack is as follows:
## LPAR IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON LPAR RPAR
##
## Ends in an error in state: 8.
##
## expr1 -> LPAR . IDENT COLON expr1 RPAR ARROW expr1 [ RPAR LET EQUAL EOF ]
## expr3 -> LPAR . expr RPAR [ TYPE RPAR LPAR LET IDENT HOLE EQUAL EOF ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON LPAR TYPE LET
##
## Ends in an error in state: 18.
##
## expr3 -> LPAR expr . RPAR [ TYPE RPAR LPAR LET IDENT HOLE EQUAL EOF ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production expr1 -> expr2
## In state 17, spurious reduction of production expr -> expr1
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON RPAR
##
## Ends in an error in state: 30.
##
## defn -> LET IDENT tele COLON . expr EQUAL expr [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT tele COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON TYPE EQUAL RPAR
##
## Ends in an error in state: 32.
##
## defn -> LET IDENT tele COLON expr EQUAL . expr [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT tele COLON expr EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON TYPE LAMBDA
##
## Ends in an error in state: 15.
##
## expr1 -> expr2 . [ RPAR LET EQUAL EOF ]
## expr2 -> expr2 . expr3 [ TYPE RPAR LPAR LET IDENT HOLE EQUAL EOF ]
##
## The known suffix of the stack is as follows:
## expr2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON TYPE LPAR RPAR
##
## Ends in an error in state: 16.
##
## expr3 -> LPAR . expr RPAR [ TYPE RPAR LPAR LET IDENT HOLE EQUAL EOF ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON TYPE RPAR
##
## Ends in an error in state: 31.
##
## defn -> LET IDENT tele COLON expr . EQUAL expr [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT tele COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production expr1 -> expr2
## In state 17, spurious reduction of production expr -> expr1
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT LPAR IDENT COLON RPAR
##
## Ends in an error in state: 6.
##
## var_decl -> LPAR IDENT COLON . expr RPAR [ LPAR COLON ]
##
## The known suffix of the stack is as follows:
## LPAR IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT LPAR IDENT COLON TYPE LET
##
## Ends in an error in state: 28.
##
## var_decl -> LPAR IDENT COLON expr . RPAR [ LPAR COLON ]
##
## The known suffix of the stack is as follows:
## LPAR IDENT COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production expr1 -> expr2
## In state 17, spurious reduction of production expr -> expr1
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT LPAR IDENT TYPE
##
## Ends in an error in state: 5.
##
## var_decl -> LPAR IDENT . COLON expr RPAR [ LPAR COLON ]
##
## The known suffix of the stack is as follows:
## LPAR IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT LPAR TYPE
##
## Ends in an error in state: 4.
##
## var_decl -> LPAR . IDENT COLON expr RPAR [ LPAR COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT TYPE
##
## Ends in an error in state: 3.
##
## defn -> LET IDENT tele . COLON expr EQUAL expr [ LET EOF ]
## tele -> tele . var_decl [ LPAR COLON ]
##
## The known suffix of the stack is as follows:
## LET IDENT tele
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET TYPE
##
## Ends in an error in state: 1.
##
## defn -> LET . IDENT tele COLON expr EQUAL expr [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TYPE
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

