#
#  prelude.ott - basic lemmas and definitions
#

def Eq (A : U) (a₀ : A) (a₁ : A) : U
  = fst [ A @ nd { y } (nd (lf { x }) (lf tt)) 
            | lf { p } ] a₀ a₁

def refl (A : U) (a : A) : Eq A a a
  = [ a
    @ nd { y } (nd (lf { x }) (lf tt)) 
    | lf { p }
    ]

def PathOver (A : U) (B : A → U)
    (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁)
    (b₀ : B a₀) (b₁ : B a₁) : U
  = fst ([ B
         @ nd { y } (nd (lf { x }) (lf tt)) 
         | lf { p }
         ] a₀ a₁ p) b₀ b₁

def PathOverOver (A : U) (B : A → U) (C : (a : A) → B a → U) 
    (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁)
    (b₀ : B a₀) (b₁ : B a₁) (q : PathOver A B a₀ a₁ p b₀ b₁)
    (c₀ : C a₀ b₀) (c₁ : C a₁ b₁) : U
  = fst ([ C
         @ nd { y } (nd (lf { x }) (lf tt)) 
         | lf { p }
         ] a₀ a₁ p b₀ b₁ q) c₀ c₁ 

def transport (A : U) (B : A → U)
    (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁)
    (b₀ : B a₀) : B a₁
  = fst snd ([ B
             @ nd { y } (nd (lf { x }) (lf tt)) 
             | lf { p }
             ] a₀ a₁ p) b₀

def is-contr (A : U) : U 
  = (a₀ : A) × (a₁ : A) → Eq A a₀ a₁

def is-equiv (A : U) (B : U) (f : A → B) : U
  = (g : B → A) ×
    (h : B → A) ×
    (l : (a : A) → Eq A a (h (f a))) ×
    ((b : B) → Eq B b (f (g b)))
    
def Equiv (A : U) (B : U) : U
  = (f : A → B) × is-equiv A B f

def eqv (A : U) (B : U)
    (f : A → B) (g : B → A)
    (l : (a : A) → Eq A a (g (f a)))
    (r : (b : B) → Eq B b (f (g b))) : Equiv A B
  = f , g , g , l , r 


#
#  Some other shapes ....
#

def Square (A : U) (a₀₀ : A) (a₀₁ : A)
    (a₁₀ : A) (a₁₁ : A)
    (p : Eq A a₀₀ a₀₁) (q : Eq A a₁₀ a₁₁)
    (r : Eq A a₀₀ a₁₀) (s : Eq A a₀₁ a₁₁) : U
  = fst ([ Eq A
         @ nd { y } (nd (lf { x }) (lf tt)) 
         | lf { p }
         ] a₀₀ a₀₁ p a₁₀ a₁₁ q) r s 

