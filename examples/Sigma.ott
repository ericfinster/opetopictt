#
#  Sigma.ott - playing around with sigma
#

import Prelude

module KanArrow (A : U) (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁)
  (B : A → U) (C : (a : A) → B a → U) where

  #
  #  Compositions in the B Fibration
  #
  
  def BEqv : Eq U (B a₀) (B a₁)
    = [ B @ nd { y } (nd (lf { x }) (lf tt))
          | lf { p } ] a₀ a₁ p 

  def compB (b₀ : B a₀) : B a₁
    = fst snd BEqv b₀ 

  def fillB (b₀ : B a₀) : fst BEqv b₀ (compB b₀)
    = fst snd snd BEqv b₀ 

  #
  #  Compositions in the C Fibration
  #

  def CEqv (b₀ : B a₀) (b₁ : B a₁) (q : fst BEqv b₀ b₁)
      : Eq U (C a₀ b₀) (C a₁ b₁)
    = [ C @ nd { y } (nd (lf { x }) (lf tt))
          | lf { p } ] a₀ a₁ p b₀ b₁ q 

  def compC (b₀ : B a₀) (b₁ : B a₁) (q : fst BEqv b₀ b₁) (c : C a₀ b₀) : C a₁ b₁
    = fst snd (CEqv b₀ b₁ q) c 

  def fillC (b₀ : B a₀) (b₁ : B a₁)
      (q : fst BEqv b₀ b₁) (c : C a₀ b₀)
    : fst (CEqv b₀ b₁ q) c (compC b₀ b₁ q c)
    = fst snd snd (CEqv b₀ b₁ q) c

  #
  #  Compositions in the Σ Fibration
  #

  def ΣP (a : A) : U
    = (b : B a) × C a b

  def ΣEqv : Eq U ((b : B a₀) × (C a₀ b)) ((b : B a₁) × (C a₁ b))
    = [ ΣP @ nd { y } (nd (lf { x }) (lf tt))
           | lf { p } ] a₀ a₁ p 

  def compΣ (ρ : ((b : B a₀) × (C a₀ b))) : (b : B a₁) × (C a₁ b)
    = let b₀ : B a₀ = fst ρ in 
      let b₁ : B a₁ = compB b₀ in
      let q : fst BEqv b₀ b₁ = fillB b₀ in
      let c₀ : C a₀ b₀ = snd ρ in 
      (b₁ , compC b₀ b₁ q c₀)

  def fillΣ (ρ : ((b : B a₀) × (C a₀ b))) : fst ΣEqv ρ (compΣ ρ)
    = let b₀ : B a₀ = fst ρ in 
      let b₁ : B a₁ = compB b₀ in
      let q : fst BEqv b₀ b₁ = fillB b₀ in
      let c₀ : C a₀ b₀ = snd ρ in
      (q , fillC b₀ b₁ q c₀)

  

end 
