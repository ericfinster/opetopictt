#
#  Sigma.ott - playing around with sigma
#

import Prelude

module KanArrow (A : U) (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁)
  (B : A → U) (C : (a : A) → B a → U) where

  def BEqv : Eq U (B a₀) (B a₁)
    = [ B @ nd { y } (nd (lf { x }) (lf tt))
          | lf { p } ] a₀ a₁ p 

  def CEqv (b₀ : B a₀) (b₁ : B a₁) (q : fst BEqv b₀ b₁)
      : Eq U (C a₀ b₀) (C a₁ b₁)
    = [ C @ nd { y } (nd (lf { x }) (lf tt))
          | lf { p } ] a₀ a₁ p b₀ b₁ q 

  def ΣP (a : A) : U
    = (b : B a) × C a b

  def ΣEqv : Eq U ((b : B a₀) × (C a₀ b)) ((b : B a₁) × (C a₁ b))
    = [ ΣP @ nd { y } (nd (lf { x }) (lf tt))
           | lf { p } ] a₀ a₁ p 

  # def claim (b₀ : B a₀) (c₀ : C a₀ b₀) (b₁ : B a₁) (c₁ : C a₁ b₁)
  #   : Eq U (fst ΣEqv (b₀ , c₀) (b₁ , c₁)) ((p : fst BEqv b₀ b₁) × fst (CEqv b₀ b₁ p) c₀ c₁)
  #   = refl U ((p : fst BEqv b₀ b₁) × fst (CEqv b₀ b₁ p) c₀ c₁)

  def goal-quad (b₀ : B a₀) (c₀ : C a₀ b₀) : U
    = (bc : (b₁ : B a₁) × (C a₁ b₁)) ×
          ((p : fst BEqv b₀ (fst bc)) × fst (CEqv b₀ (fst bc) p) c₀ (snd bc))

  def have-quad (b₀ : B a₀) (c₀ : C a₀ b₀) : U
    = (bq : (b₁ : B a₁) × fst BEqv b₀ b₁) ×
          ((c₁ : C a₁ (fst bq)) × fst (CEqv b₀ (fst bq) (snd bq)) c₀ c₁)

  def quad-eqv (b₀ : B a₀) (c₀ : C a₀ b₀)
    : Equiv (have-quad b₀ c₀) (goal-quad b₀ c₀)
    = Σ-diamond (B a₁) (fst BEqv b₀) (C a₁)
        (λ b₁ → λ q → λ c₁ → fst (CEqv b₀ b₁ q) c₀ c₁)

  def under-contr (b₀ : B a₀) (c₀ : C a₀ b₀)
    : is-contr ((b₁ : B a₁) × fst BEqv b₀ b₁)
    = fst snd BEqv b₀

  def over-contr (b₀ : B a₀) (c₀ : C a₀ b₀)
      (bq : (b₁ : B a₁) × fst BEqv b₀ b₁)
    : is-contr ((c₁ : C a₁ (fst bq)) × fst (CEqv b₀ (fst bq) (snd bq)) c₀ c₁)
    = fst snd (CEqv b₀ (fst bq) (snd bq)) c₀

  def have-contr (b₀ : B a₀) (c₀ : C a₀ b₀)
    : is-contr (have-quad b₀ c₀)
    = Σ-contr ((b₁ : B a₁) × fst BEqv b₀ b₁)
              (λ bq → ((c₁ : C a₁ (fst bq)) × fst (CEqv b₀ (fst bq) (snd bq)) c₀ c₁))
              (under-contr b₀ c₀)
              # (λ bq → fst snd (CEqv b₀ (fst bq) (snd bq)) c₀)
              (over-contr b₀ c₀)

end 
