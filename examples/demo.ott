#
#  demo.ott - some samples of opetopictt
#

let id (A : U) (a : A) : A = a

let Eq : (A : U) → A → A → U
  = λ A. λ x. λ y. (P : A → U) → P x → P y

let refl : (A : U) → (x : A) → Eq A x x
  = λ A. λ x. λ P. λ px. px

let Nat : U
  = (A : U) → A → (A → A) → A

let zero : Nat
  = λ A. λ zero. λ succ. zero

let succ : Nat → Nat
  = λ n. λ A. λ zero. λ succ. succ (n A zero succ)

let one : Nat
  = succ (zero)


