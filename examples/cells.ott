#
#  cells.ott - demonstrations of cells
#

let Eq (A : U) (a₀ : A) (a₁ : A) : U
  = [ ⊢ A
    | nd { ⊢ a₁ } (nd (lf { ⊢ a₀ }) (lf tt)) 
    | lf { ⊢ ● }
    ] 

let PathOver
    (A : U) (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁)
    (B : A → U) (b₀ : B a₀) (b₁ : B a₁) : U
  = [ (a : A) ⊢ B a
    | nd { a₁ ⊢ b₁ } (nd (lf { a₀ ⊢ b₀ }) (lf tt)) 
    | lf { p ⊢ ● }
    ] 

let PathOverOver
    (A : U) (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁)
    (B : A → U) (b₀ : B a₀) (b₁ : B a₁) (q : PathOver A a₀ a₁ p B b₀ b₁)
    (C : (a : A) → (b : B a) → U) (c₀ : C a₀ b₀) (c₁ : C a₁ b₁) : U
  = [ (a : A) (b : B a) ⊢ C a b
    | nd { a₁ ; b₁ ⊢ c₁ } (nd (lf { a₀ ; b₀ ⊢ c₀ }) (lf tt)) 
    | lf { p ; q ⊢ ● }
    ] 

let Null (A : U) (a : A) (p : Eq A a a) : U
  = [ ⊢ A
    | lf { ⊢ a }
    | nd { ⊢ p } (lf tt)
    | lf { ⊢ ● }
    ] 

let Simplex
    (A : U) (a₀ : A) (a₁ : A) (a₂ : A)
    (p : Eq A a₀ a₁) (q : Eq A a₁ a₂) (r : Eq A a₀ a₂) : U
  = [ ⊢ A
    | nd { ⊢ a₂ } (nd (nd { ⊢ a₁ } (nd (lf { ⊢ a₀ }) (lf tt))) (lf tt))
    | nd { ⊢ r } (nd (lf { ⊢ q }) (nd (nd (lf { ⊢ p })
        (nd (lf tt) (lf tt))) (lf tt)))
    | lf { ⊢ ● }
    ]

let SimplexOver
    (A : U) (a₀ : A) (a₁ : A) (a₂ : A)
    (pa : Eq A a₀ a₁) (qa : Eq A a₁ a₂) (ra : Eq A a₀ a₂)
    (σ : Simplex A a₀ a₁ a₂ pa qa ra)
    (B : A → U) (b₀ : B a₀) (b₁ : B a₁) (b₂ : B a₂)
    (pb : PathOver A a₀ a₁ pa B b₀ b₁)
    (qb : PathOver A a₁ a₂ qa B b₁ b₂)
    (rb : PathOver A a₀ a₂ ra B b₀ b₂) : U
  = [ (a : A) ⊢ B a
    | nd { a₂ ⊢ b₂ } (nd (nd { a₁ ⊢ b₁ } (nd (lf { a₀ ⊢ b₀ }) (lf tt))) (lf tt))
    | nd { ra ⊢ rb } (nd (lf { qa ⊢ qb }) (nd (nd (lf { pa⊢ pb })
        (nd (lf tt) (lf tt))) (lf tt)))
    | lf { σ ⊢ ● }
    ]

# This example shows how constant fibrations do not calculate quite as
# nicely as one might home in the current setting ...

let Square
    (A : U) (a₀₀ : A) (a₀₁ : A) (a₁₀ : A) (a₁₁ : A)
    (p : Eq A a₀₀ a₀₁)
    (q : Eq A a₀₀ a₁₀)
    (s : Eq A a₁₀ a₁₁)
    (r : PathOver A a₀₀ a₁₀ q (λ a . A) a₀₁ a₁₁) : U
    # Would have liked: (r : Eq A a₀₁ a₁₁)
  = [ (a₀ : A) (a₁ : A) ⊢ Eq A a₀ a₁
    | nd { a₁₀ ; a₁₁ ⊢ s } (nd (lf { a₀₀ ; a₀₁ ⊢ p }) (lf tt)) 
    | lf { q ; r ⊢ ● }
    ] 

#
#  Various comp tests 
#

let transport (A : U) (B : A → U)
    (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁)
    (b₀ : B a₀) : B a₁ 
  = comp [ (a : A) ⊢ B a
         | nd { a₁ ⊢ ● } (nd (lf { a₀ ⊢ b₀ }) (lf tt)) 
         | lf { p ⊢ ● }
         ]

let refl (A : U) (a : A) : Eq A a a
  = comp [ ⊢ A
         | lf { ⊢ a }
         | nd { ⊢ ● } (lf tt)
         | lf { ⊢ ● }
         ]

let null (A : U) (a : A) : Null A a (refl A a)
  = fill [ ⊢ A
         | lf { ⊢ a }
         | nd { ⊢ ● } (lf tt)
         | lf { ⊢ ● }
         ]

let trans (A : U) (a₀ : A) (a₁ : A) (a₂ : A)
    (p : Eq A a₀ a₁) (q : Eq A a₁ a₂) : Eq A a₀ a₂
  = comp [ ⊢ A
         | nd { ⊢ a₂ } (nd (nd { ⊢ a₁ } (nd (lf { ⊢ a₀ }) (lf tt))) (lf tt))
         | nd { ⊢ ● } (nd (lf { ⊢ q }) (nd (nd (lf { ⊢ p })
             (nd (lf tt) (lf tt))) (lf tt)))
         | lf { ⊢ ● }
         ]

let sym (A : U) (a₀ : A) (a₁ : A)
    (p : Eq A a₀ a₁) : Eq A a₁ a₀
  = comp [ ⊢ A
         | nd { ⊢ a₀ } (nd (nd { ⊢ a₁ } (nd (lf { ⊢ a₀ }) (lf tt))) (lf tt))
         | nd { ⊢ refl A a₀ } (nd (lf { ⊢ ● }) (nd (nd (lf { ⊢ p })
             (nd (lf tt) (lf tt))) (lf tt)))
         | lf { ⊢ ● }
         ]

let blorp (A : U) (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁) : U
  = kan-elim [ ⊢ A
             | nd { ⊢ ● } (nd (lf { ⊢ a₀ }) (lf tt)) 
             | lf { ⊢ ● }
             ] (λ c. λ f. U) A a₁ p 

let ucomp (A : U) (a : A) : A
  = comp [ ⊢ A
         | nd { ⊢ ● } (nd (lf { ⊢ a }) (lf tt)) 
         | lf { ⊢ ● }
         ] 

let ufill (A : U) (a : A) : Eq A a (ucomp A a)
  = fill [ ⊢ A
         | nd { ⊢ ● } (nd (lf { ⊢ a }) (lf tt)) 
         | lf { ⊢ ● }
         ]

let test (A : U) (a : A) : Eq U (blorp A a (ucomp A a) (ufill A a)) A
  = refl U A 


