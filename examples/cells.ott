#
#  cells.ott - demonstrations of cells
#

let Eq (A : U) (a₀ : A) (a₁ : A) : U
  = [ ⊢ A
    | nd { ⊢ a₁ } (nd (lf { ⊢ a₀ }) (lf tt)) 
    | lf { ⊢ ● }
    ] 

let PathOver
    (A : U) (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁)
    (B : A → U) (b₀ : B a₀) (b₁ : B a₁) : U
  = [ (a : A) ⊢ B a
    | nd { a₁ ⊢ b₁ } (nd (lf { a₀ ⊢ b₀ }) (lf tt)) 
    | lf { p ⊢ ● }
    ] 

let PathOverOver
    (A : U) (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁)
    (B : A → U) (b₀ : B a₀) (b₁ : B a₁) (q : PathOver A a₀ a₁ p B b₀ b₁)
    (C : (a : A) → (b : B a) → U) (c₀ : C a₀ b₀) (c₁ : C a₁ b₁) : U
  = [ (a : A) (b : B a) ⊢ C a b
    | nd { a₁ ; b₁ ⊢ c₁ } (nd (lf { a₀ ; b₀ ⊢ c₀ }) (lf tt)) 
    | lf { p ; q ⊢ ● }
    ] 

let Null (A : U) (a : A) (p : Eq A a a) : U
  = [ ⊢ A
    | lf { ⊢ a }
    | nd { ⊢ p } (lf tt)
    | lf { ⊢ ● }
    ] 

let Simplex
    (A : U) (a₀ : A) (a₁ : A) (a₂ : A)
    (p : Eq A a₀ a₁) (q : Eq A a₁ a₂) (r : Eq A a₀ a₂) : U
  = [ ⊢ A
    | nd { ⊢ a₂ } (nd (nd { ⊢ a₁ } (nd (lf { ⊢ a₀ }) (lf tt))) (lf tt))
    | nd { ⊢ r } (nd (lf { ⊢ q }) (nd (nd (lf { ⊢ p })
        (nd (lf tt) (lf tt))) (lf tt)))
    | lf { ⊢ ● }
    ]

let SimplexOver
    (A : U) (a₀ : A) (a₁ : A) (a₂ : A)
    (pa : Eq A a₀ a₁) (qa : Eq A a₁ a₂) (ra : Eq A a₀ a₂)
    (σ : Simplex A a₀ a₁ a₂ pa qa ra)
    (B : A → U) (b₀ : B a₀) (b₁ : B a₁) (b₂ : B a₂)
    (pb : PathOver A a₀ a₁ pa B b₀ b₁)
    (qb : PathOver A a₁ a₂ qa B b₁ b₂)
    (rb : PathOver A a₀ a₂ ra B b₀ b₂) : U
  = [ (a : A) ⊢ B a
    | nd { a₂ ⊢ b₂ } (nd (nd { a₁ ⊢ b₁ } (nd (lf { a₀ ⊢ b₀ }) (lf tt))) (lf tt))
    | nd { ra ⊢ rb } (nd (lf { qa ⊢ qb }) (nd (nd (lf { pa⊢ pb })
        (nd (lf tt) (lf tt))) (lf tt)))
    | lf { σ ⊢ ● }
    ]

# This example shows how constant fibrations do not calculate quite as
# nicely as one might home in the current setting ...

let Square
    (A : U) (a₀₀ : A) (a₀₁ : A) (a₁₀ : A) (a₁₁ : A)
    (p : Eq A a₀₀ a₀₁)
    (q : Eq A a₀₀ a₁₀)
    (s : Eq A a₁₀ a₁₁)
    (r : PathOver A a₀₀ a₁₀ q (λ a . A) a₀₁ a₁₁) : U
    # Would have liked: (r : Eq A a₀₁ a₁₁)
  = [ (a₀ : A) (a₁ : A) ⊢ Eq A a₀ a₁
    | nd { a₁₀ ; a₁₁ ⊢ s } (nd (lf { a₀₀ ; a₀₁ ⊢ p }) (lf tt)) 
    | lf { q ; r ⊢ ● }
    ] 

#
#  Various comp tests 
#

let transport (A : U) (B : A → U)
    (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁)
    (b₀ : B a₀) : B a₁ 
  = comp [ (a : A) ⊢ B a
         | nd { a₁ ⊢ ● } (nd (lf { a₀ ⊢ b₀ }) (lf tt)) 
         | lf { p ⊢ ● }
         ]

let transport-univ (A : U) (B : U) (e : Eq U A B) (a : A) : B 
  = comp [ (T : U) ⊢ T
         | nd { B ⊢ ● } (nd (lf { A ⊢ a }) (lf tt)) 
         | lf { e ⊢ ● }
         ]

# let more-transport-univ
#   = comp [ (A : U) (B : A → U) (a : A) ⊢ B a
#          | nd { A₁ ; B₁ ; a₁ ⊢ ● } (nd (lf { A₀ ; B₀ ; a₀ ⊢ b₀ }) (lf tt)) 
#          | lf { E ; F ; p ⊢ ● }
#          ]

let var-cells (A : U) (B : U) (e : Eq U A B)
    (a : A) (b : B) : U 
  = [ (T : U) ⊢ T
    | nd { B ⊢ b } (nd (lf { A ⊢ a }) (lf tt)) 
    | lf { e ⊢ ● }
    ]

let refl (A : U) (a : A) : Eq A a a
  = comp [ ⊢ A
         | lf { ⊢ a }
         | nd { ⊢ ● } (lf tt)
         | lf { ⊢ ● }
         ]

let null (A : U) (a : A) : Null A a (refl A a)
  = fill [ ⊢ A
         | lf { ⊢ a }
         | nd { ⊢ ● } (lf tt)
         | lf { ⊢ ● }
         ]

let trans (A : U) (a₀ : A) (a₁ : A) (a₂ : A)
    (p : Eq A a₀ a₁) (q : Eq A a₁ a₂) : Eq A a₀ a₂
  = comp [ ⊢ A
         | nd { ⊢ a₂ } (nd (nd { ⊢ a₁ } (nd (lf { ⊢ a₀ }) (lf tt))) (lf tt))
         | nd { ⊢ ● } (nd (lf { ⊢ q }) (nd (nd (lf { ⊢ p })
             (nd (lf tt) (lf tt))) (lf tt)))
         | lf { ⊢ ● }
         ]

let sym (A : U) (a₀ : A) (a₁ : A)
    (p : Eq A a₀ a₁) : Eq A a₁ a₀
  = comp [ ⊢ A
         | nd { ⊢ a₀ } (nd (nd { ⊢ a₁ } (nd (lf { ⊢ a₀ }) (lf tt))) (lf tt))
         | nd { ⊢ refl A a₀ } (nd (lf { ⊢ ● }) (nd (nd (lf { ⊢ p })
             (nd (lf tt) (lf tt))) (lf tt)))
         | lf { ⊢ ● }
         ]

#
#  Testing the kan eliminator
#

let ucomp (A : U) (a : A) : A
  = comp [ ⊢ A
         | nd { ⊢ ● } (nd (lf { ⊢ a }) (lf tt)) 
         | lf { ⊢ ● }
         ] 

let ufill (A : U) (a : A) : Eq A a (ucomp A a)
  = fill [ ⊢ A
         | nd { ⊢ ● } (nd (lf { ⊢ a }) (lf tt)) 
         | lf { ⊢ ● }
         ]

let out_path (A : U) (a₀ : A) : U
  = (a₁ : A) × (Eq A a₀ a₁)

let out_path_contr (A : U) (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁) 
  : Eq (out_path A a₀) (a₁ , p) (ucomp A a₀ , ufill A a₀)
  = kan-elim [ ⊢ A
             | nd { ⊢ ● } (nd (lf { ⊢ a₀ }) (lf tt)) 
             | lf { ⊢ ● }
             ]
    (λ c. λ f. Eq (out_path A a₀) (c , f) (ucomp A a₀ , ufill A a₀))
    (refl (out_path A a₀) (ucomp A a₀ , ufill A a₀)) a₁ p

let path_from_refl (A : U) (a₀ : A) (a₁ : A) (p : Eq A a₀ a₁)
  : Eq (out_path A a₀) (a₀ , refl A a₀) (a₁ , p)
  = trans (out_path A a₀) (a₀ , refl A a₀) (ucomp A a₀ , ufill A a₀) (a₁ , p)
      (out_path_contr A a₀ a₀ (refl A a₀))
      (sym (out_path A a₀) (a₁ , p) (ucomp A a₀ , ufill A a₀)
           (out_path_contr A a₀ a₁ p))

let J (A : U) (a₀ : A) (P : out_path A a₀ → U)
    (d : P (a₀ , refl A a₀)) (a₁ : A) (p : Eq A a₀ a₁)
  : P (a₁ , p)
  = transport (out_path A a₀) P
      (a₀ , refl A a₀) (a₁ , p) (path_from_refl A a₀ a₁ p) d

#
#  Testing Cell reduction for Σ
#

let Σ-test (A : U) (B : A → U) 
    (a₀ : A) (b₀ : B a₀)
    (a₁ : A) (b₁ : B a₁)
    (p : Eq A a₀ a₁) (q : PathOver A a₀ a₁ p B b₀ b₁)
  : Eq ((a : A) × B a) (a₀ , b₀) (a₁ , b₁)
  = p , q 

#
#  Testing Cell reduction for Π
#

# Interesting to see that the order of abstraction here is
# really crucial.  This isn't officially a bug, but you
# should revisit how it comes out for ergonomics ...

let Π-test (A : U) (B : A -> U)
    (σ₀ : (a : A) → B a)
    (σ₁ : (a : A) → B a)
    (σ₀₁ : (a₁ : A) → (a₀ : A) → (a₀₁ : Eq A a₀ a₁)
      → PathOver A a₀ a₁ a₀₁ B (σ₀ a₀) (σ₁ a₁))
  : Eq ((a : A) → B a) σ₀ σ₁
  = σ₀₁

#
#  Testing cell reduction for U
#

let Univ-test (A : U) (B : U)
    (E : B → A → U)
  : Eq U A B
  = E

let Univ-test2 (A : U) (B : U) (C : U)
    (E : B → A → U)
    (F : C → B → U)
    (G : C → A → U)
    (H : (c : C) → (b : B) → (a : A)
      → (g : G c a) → (f : F c b) → (e : E b a) → U)
  : Simplex U A B C E F G
  = H

