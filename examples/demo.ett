#
#  demo.ett - some samples of erictt
#

let id (A : U) (a : A) : A = a

let id2 {A : U} : A -> A = \a. a

let const {A : U} {B : U} : A -> B -> A
  = \a.\b.a

let argTest1 : U -> U = const {U} {U} U

# -- implicit arg types can be omitted
# let const : {A B} -> A -> B -> A = \x y. x;

# let List : U -> U
#   = \A. (L : U) -> (A -> L -> L) -> L -> L

# let nil : (A : _) -> List A
#   = \A. \L. \cons. \nil. nil

# let cons : (A : _) -> A -> List A -> List A
#   = \A. \x. \xs. \L. \cons. \nil. cons x (xs _ cons nil)

# let Bool : U
#   = (B : _) -> B -> B -> B

# let true : Bool
#   = \B. \t. \f. t

# let false : Bool
#   = \B. \t. \f. f

# let not : Bool -> Bool
#   = \b. \B. \t. \f. b B f t

# let Eq : (A : _) -> A -> A -> U
#   = \A. \x. \y. (P : A -> U) -> P x -> P y

# let refl : (A : _) -> (x : A) -> Eq A x x
#   = \A. \x. \P. \px. px

# let list1 : List Bool
#   = cons _ (id _ true) (nil _)

# let list2 : List Bool
#   = cons _ true (cons _ false (nil _))

